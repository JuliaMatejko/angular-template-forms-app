

---- Building a template-driven form ----

This tutorial shows you how to create   a template-driven form  .
The   control elements in the form   are   bound   to data properties that have input validation.
The input validation helps maintain data integrity and styling to improve the user experience.

Template-driven forms use   two-way data binding   to update the data model in the component as changes are made in the template and vice versa.


-- Template vs Reactive forms --
Angular supports two design approaches for interactive forms.

  Template-driven   forms allow you to use   form-specific   directives   in your Angular template.

  Reactive   forms provide a   model-driven approach   to building forms.

Template-driven forms are a great choice for   small or simple forms  ,

while   reactive forms   are    more scalable and suitable for   complex forms  .

For a comparison of the two approaches, see Choosing an approach
--

You can build almost any kind of form with an Angular template â€”  login forms,   contact forms, and pretty much   any business form.
You can lay out the controls creatively and bind them to the data in your object model.
You can specify   validation rules   and   display validation errors,   conditionally allow input from specific controls,
trigger built-in visual feedback, and much more.

--- Objectives ---

This tutorial teaches you how to do the following:

- Build an Angular form with   a component   and   template
- Use   ngModel   to create   two-way data bindings   for reading and writing input-control values
- Provide visual feedback using   special CSS classes   that track the state of the controls
-   Display validation errors   to users and   conditionally allow input   from form controls based on the form status
-   Share information across HTML elements   using   template reference variables

--- Build a template-driven form ---

Template-driven forms rely on   directives   defined in the   FormsModule  .

Directives	      Details

NgModel	        Reconciles value changes in the attached   form element   with changes in the   data model,
                allowing you to respond to user input with   input validation   and   error handling  .

NgForm	        Creates a   top-level FormGroup instance   and   binds it   to a <form> element   to track aggregated form value and validation status.
                As soon as you import   FormsModule,   this directive becomes active by default on all <form> tags. You don't need to add a special selector.

NgModelGroup	  Creates and binds a   FormGroup instance   to   a DOM element  .


--- Step overview ---

In the course of this tutorial, you   bind a sample form to data   and   handle user input   using the following steps.

1. Build the basic form.
  - Define a sample data model
  - Include required infrastructure such as the  FormsModule

2. Bind form controls to data properties using the  ngModel directive   and   two-way data-binding syntax.
  - Examine how ngModel reports control states using CSS classes
  - Name controls to make them accessible to ngModel

3. Track   input validity   and   control status   using   ngModel  .
  - Add custom CSS to provide visual feedback on the status
  - Show and hide validation-error messages

4. Respond to a   native HTML button-click event   by adding to the model data.

5. Handle form submission using the   ngSubmit   output property of the form.
  - Disable the   Submit   button until the form is valid
  - After submit, swap out the finished form for different content on the page


--- Build the form ---

1. The provided sample application creates the   Actor   class which defines the data model reflected in the form.

export class Actor {
  constructor(
    public id: number,
    public name: string,
    public skill: string,
    public studio?: string,
  ) {}
}

1. The form layout and details are defined in the   ActorFormComponent   class.

import {Component} from '@angular/core';
import {Actor} from '../actor';

@Component({
  selector: 'app-actor-form',
  templateUrl: './actor-form.component.html',
  standalone: false,
})
export class ActorFormComponent {
  skills = ['Method Acting', 'Singing', 'Dancing', 'Swordfighting'];
  model = new Actor(18, 'Tom Cruise', this.skills[3], 'CW Productions');
  submitted = false;
  onSubmit() {
    this.submitted = true;
  }
}

The component's selector value of "app-actor-form" means you can drop this form in a parent template using the <app-actor-form> tag.

2. The following code creates a new actor instance, so that the initial form can show an example actor.

const myActress = new Actor(42, 'Marilyn Monroe', 'Singing');
console.log('My actress is called ' + myActress.name); // "My actress is called Marilyn"

This demo uses dummy data for   model   and   skills  .
In a real app, you would inject a data service to get and save real data, or expose these properties as inputs and outputs.

3. The application enables the Forms feature and registers the created form component.

import {CommonModule} from '@angular/common';
import {NgModule} from '@angular/core';
import {FormsModule} from '@angular/forms';
import {BrowserModule} from '@angular/platform-browser';
import {AppComponent} from './app.component';
import {ActorFormComponent} from './actor-form/actor-form.component';

@NgModule({
  imports: [BrowserModule, CommonModule, FormsModule],
  declarations: [AppComponent, ActorFormComponent],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}


--- NgModule app ---

From Angular v17 onwards, Standalone is now the new   default   for the CLI.

So when you create a new project, you won't have any modules in it if you don't specify anything.

However, it is still possible to create a module-based app by using the   --no-standalone flag   :

  ng new --no-standalone [projectName]

instead of  ng new [projectName]

---

1. The form is displayed in the application layout defined by the root component's template.

<app-actor-form></app-actor-form>

The initial template defines the layout for   a form   with   two form groups   and   a submit button.
The   form groups   correspond to   two properties   of the Actor data model,   name   and   studio  . Each group has a label and a box for user input.

The   Name <input> control   element has the HTML5 required attribute
The   Studio <input> control   element does not because studio is optional
The   Submit button   has some classes on it for styling. At this point, the form layout is all plain HTML5, with no bindings or directives.

2. The sample form uses some style classes from Twitter Bootstrap: container, form-group, form-control, and btn.
To use these styles, the application's style sheet imports the library.

@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');

The form requires that an actor's skill is chosen from a predefined list of skills maintained internally in   ActorFormComponent.
The Angular   NgForOf directive   iterates over the data values to populate the <select> element.

<div class="form-group">
          <label for="skill">Skill</label>
          <select class="form-control" id="skill" required>
            <option *ngFor="let skill of skills" [value]="skill">{{ skill }}</option>
          </select>
        </div>

If you run the application right now, you see the list of skills in the selection control.
The input elements are not yet bound to data values or events, so they are still blank and have no behavior.

--- Bind input controls to data properties ---

The next step is to bind the   input controls   to the corresponding   Actor   properties with two-way data binding,
so that they respond to user input by updating the data model, and also respond to programmatic changes in the data by updating the display.

The   ngModel directive   declared in the   FormsModule  lets you bind controls in your   template-driven form   to properties in your data model.
When you include the directive using the syntax for two-way data binding,   [(ngModel)],    Angular can track the value and user interaction of
 the control and keep the view synced with the model.

1. Edit the template file   actor-form.component.html.
2. Find the <input> tag next to the   Name   label.
3. Add the   ngModel   directive, using two-way data binding syntax   [(ngModel)]="..."  .

<input type="text" class="form-control" id="name"
           required
           [(ngModel)]="model.name" name="name">
    TODO: remove this: {{ model.name}}

HELPFUL: This example has a temporary diagnostic   interpolation   after each input tag,   {{model.name}},   to show the current data value
of the corresponding property. The comment reminds you to remove the diagnostic lines when you have finished observing the two-way data binding at work.


--- Access the overall form status ---

When you imported the   FormsModule   in your component, Angular automatically created and attached an   NgForm   directive to the <form> tag in the template
(because NgForm has the selector form that matches <form> elements).

To get access to the   NgForm   and the overall form status, declare a  template reference variable  .

1. Edit the template file   actor-form.component.html  .

2. Update the   <form> tag   with a   template reference variable,   #actorForm,   and set its value as follows.

<form #actorForm="ngForm">

The   actorForm   template variable   is now a reference to the   NgForm directive instance   that governs the form as a whole.

3. Run the app.

4. Start typing in the   Name   input box.

As you add and delete characters, you can see them appear and disappear from the data model.

The diagnostic line that shows interpolated values demonstrates that values are really flowing from the input box to the model and back again.

--- Naming control elements ---

When you use   [(ngModel)]   on an element, you must define a   name attribute   for that element.
Angular uses the assigned name to   register the element with the NgForm directive   attached to the parent <form> element.

The example added a   name   attribute to the   <input>   element and set it to   "name"  , which makes sense for the actor's name.
Any unique value will do, but using a descriptive name is helpful.

1. Add similar   [(ngModel)]   bindings and name attributes to   Studio   and   Skill  .
2. You can now remove the diagnostic messages that show interpolated values.
3. To confirm that two-way data binding works for the entire actor model, add a new text binding with the   json   pipe at the top to the component's template,
  which serializes the data to a string.

After these revisions, the form template should look like the following:

{{ model | json }}
<div class="form-group">
    <label for="name">Name</label>
    <input type="text" class="form-control" id="name"
            required
            [(ngModel)]="model.name" name="name">
</div>
<div class="form-group">
    <label for="studio">Studio</label>
    <input type="text"  class="form-control" id="studio"
            [(ngModel)]="model.studio" name="studio">
</div>
<div class="form-group">
    <label for="skill">Skill</label>
    <select class="form-control"  id="skill"
            required
            [(ngModel)]="model.skill" name="skill">
    <option *ngFor="let skill of skills" [value]="skill">{{ skill }}</option>
    </select>
</div>

You'll notice that:

- Each   <input>   element has an   id   property. This is used by the   <label>   element's for attribute to match the label to its input control.
  This is a standard HTML feature.

- Each   <input>   element also has the required   name   property that Angular uses   to register the control with the form  .

When you have observed the effects, you can delete the   {{ model | json }}   text binding.

--- Track form states ---
Angular applies the   ng-submitted   class to   form   elements after the form has been submitted.
This class can be used to change the form's style after it has been submitted.

--- Track control states ---
Adding the   NgModel directive   to a control   adds class names   to the control that describe its   state  . 
These classes can be used to change a control's style based on its state.

The following table describes   the class names   that Angular applies based on the   control's state  .

States	                            Class if true	    Class if false
The control has been visited.	    ng-touched	        ng-untouched
The control's value has changed.	ng-dirty	        ng-pristine
The control's value is valid.	    ng-valid	        ng-invalid

Angular also applies the   ng-submitted   class to   form   elements upon submission, but not to the controls inside the   form   element.

You use these CSS classes to define the styles for your control based on its status.

--- Observe control states ---

To see how the classes are added and removed by the framework, open the browser's developer tools and inspect the   <input> element   that represents the actor name.

1. Using your browser's developer tools, find the <input> element that corresponds to the   Name   input box.
   You can see that the element has multiple CSS classes in addition to "form-control".

2. When you first bring it up, the classes indicate that it has a valid value, that the value has not been changed since initialization or reset,
   and that the control has not been visited since initialization or reset.

<input class="form-control ng-untouched ng-pristine ng-valid">;

3. Take the following actions on the   Name <input>   box, and observe which classes appear.

- Look but don't touch. The classes indicate that it is untouched, pristine, and valid.

- Click inside the name box, then click outside it.
  The control has now been visited, and the element has the   ng-touched   class instead of the   ng-untouched   class.

- Add slashes to the end of the name. It is now touched and dirty.

- Erase the name. This makes the value invalid, so the   ng-invalid   class replaces the   ng-valid   class.

--- Create visual feedback for states ---

The   ng-valid / ng-invalid   pair is particularly interesting, because you want to send   a strong visual signal   when the values are   invalid  .
You also want to   mark required fields  .

You can mark   required fields   and   invalid data   at the same time with a colored bar on the left of the input box.

To change the appearance in this way, take the following steps.

1. Add definitions for the   ng-*   CSS classes.
2. Add these class definitions to a new   forms.css   file.
3. Add the new file to the project as a sibling to   index.html  :

.ng-valid[required], .ng-valid.required  {
  border-left: 5px solid #42A948; /* green */
}
.ng-invalid:not(form)  {
  border-left: 5px solid #a94442; /* red */
}

In the index.html file, update the <head> tag to include the new style sheet.

<link rel="stylesheet" href="assets/forms.css">

--- Show and hide validation error messages ---

The   Name   input box is required and clearing it turns the bar red.
That indicates that something is wrong, but the user doesn't know what is wrong or what to do about it.
You can provide a helpful message by checking for and responding to the control's state.

The   Skill   select box is also required, but it doesn't need this kind of error handling because the selection box already constrains the selection to valid values.

To define and show an error message when appropriate, take the following steps.

1. Add a local reference to the input

Extend the   input   tag with a   template reference variable   that you can use to access the input box's Angular control from within the template.
In the example, the variable is   #name="ngModel"  .

The template reference variable (#name) is set to "ngModel" because that is the value of the   NgModel.exportAs   property.
This property tells Angular how to link a reference variable to a directive.

2. Add the error message

Add a <div> that contains a suitable error message.

3. Make the error message conditional

Show or hide the error message by binding properties of the   name   control to the message <div> element's hidden property.

<div [hidden]="name.valid || name.pristine"
             class="alert alert-danger">

4. Add a conditional error message to name

Add a conditional error message to the   name   input box, as in the following example.

<label for="name">Name</label>
        <input type="text" class="form-control" id="name"
               required [(ngModel)]="model.name" name="name"
               #name="ngModel">
        <div [hidden]="name.valid || name.pristine"
             class="alert alert-danger">
          Name is required
        </div>

---
In this example, you hide the message when the control is either   valid   or   pristine.

  Pristine means   the user hasn't changed the value since it was displayed in this form  .

If you ignore the pristine state, you would hide the message only when the value is valid.
If you arrive in this component with a new, blank actor or an invalid actor, you'll see the error message immediately, before you've done anything.

You might want the message to display only when the   user   makes   an invalid change  .
Hiding the message while the control is in the   pristine   state achieves that goal.
You'll see the significance of this choice when you add a new actor to the form in the next step.
---

--- Add a new actor ---

This exercise shows how you can respond to a native HTML button-click event by adding to the model data.
To let form users add a new actor, you will add a   New Actor   button that responds to a   click   event.

1. In the template, place a   "New Actor" <button> element   at the bottom of the form.
2. In the component file, add the actor-creation method to the actor data model.

newActor() {
    this.model = new Actor(42, '', '');
  }

Bind the button's click event to an actor-creation method,   newActor()  .

<button type="button" class="btn btn-default"
        (click)="newActor()">New Actor</button>


1. Run the application again and click the   New Actor   button.

The form clears, and the   required   bars to the left of the input box are red, indicating invalid name and skill properties.
Notice that the error messages are hidden. This is because the form is pristine; you haven't changed anything yet.

2. Enter a name and click   New Actor   again.

Now the application displays a   Name   is required error message, because the input box is no longer pristine.
The form remembers that you entered a name before clicking   New Actor  .

3. To restore the pristine state of the form controls, clear all of the flags imperatively by calling the form's   reset()   method
   after calling the newActor() method.

<button type="button" class="btn btn-default"
        (click)="newActor(); actorForm.reset()">New Actor</button>

Now clicking   New Actor   resets both the form and its control flags.

--- Submit the form with   ngSubmit   ---

The user should be able to submit this form after filling it in. The   Submit   button at the bottom of the form does nothing on its own, but
it does   trigger a form-submit event   because of its type (type="submit").

To respond to this event, take the following steps.

1. Listen to ngOnSubmit

Bind the form's   ngSubmit   event property to the actor-form component's   onSubmit()   method.

    <form (ngSubmit)="onSubmit()" #actorForm="ngForm">


2. Bind the disabled property

Use the template reference variable,   #actorForm   to access the form that contains the   Submit   button and create an event binding.

You will bind the form property that indicates its overall validity to the   Submit   button's   disabled   property.

<button type="submit" class="btn btn-success"
        [disabled]="!actorForm.form.valid">Submit</button>


3. Run the application

Notice that the button is enabled â€”although it doesn't do anything useful yet.

4. Delete the Name value

This violates the "required" rule, so it displays the error message â€”and notice that it also disables the Submit button.

You didn't have to explicitly wire the button's enabled state to the form's validity.
The   FormsModule   did this automatically when you defined a template reference variable on the enhanced form element,
then referred to that variable in the button control.


--- Respond to form submission ---

To show a response to form submission, you can hide the data entry area and display something else in its place.

1. Wrap the form

Wrap the entire form in a <div> and bind its hidden property to the   ActorFormComponent.submitted   property.

<div [hidden]="submitted">
    <h1>Actor Form</h1>
    <form (ngSubmit)="onSubmit()" #actorForm="ngForm">
...
       <!-- ... all of the form ... -->
    </form>
  </div>

The main form is visible from the start because the   submitted   property is false until you submit the form,
as this fragment from the   ActorFormComponent   shows:

submitted = false;
  onSubmit() {
    this.submitted = true;
  }

When you click the   Submit   button, the   submitted   flag becomes true and the form disappears.

2. Add the submitted state

To show something else while the form is in the submitted state, add the following HTML below the new <div> wrapper.

<div [hidden]="!submitted">
    <h2>You submitted the following:</h2>
    <div class="row">
      <div class="col-xs-3">Name</div>
      <div class="col-xs-9">{{ model.name }}</div>
    </div>
    <div class="row">
      <div class="col-xs-3">Studio</div>
      <div class="col-xs-9">{{ model.studio }}</div>
    </div>
    <div class="row">
      <div class="col-xs-3">Skill</div>
      <div class="col-xs-9">{{ model.skill }}</div>
    </div>
    <br>
    <button type="button" class="btn btn-primary" (click)="submitted=false">
      Edit
    </button>
  </div>

This <div>, which shows a read-only actor with interpolation bindings, appears only while the component is in the submitted state.

The alternative display includes an   Edit   button whose click event is bound to an expression that clears the submitted flag.

3. Test the Edit button

Click the   Edit   button to switch the display back to the editable form.


--- Summary ---

The Angular form discussed in this page takes advantage of the following framework features to provide support for
  data modification,   validation,   and   more.

- An Angular HTML   form template
- A   form component class   with a   @Component decorator
-   Handling form submission   by   binding   to the   NgForm.ngSubmit event property      (ngSubmit)=OnSubmit()
-   Template-reference variables   such as   #actorForm   and  #name
-   [(ngModel)] syntax   for   two-way data binding
- The use of   name attributes   for validation and form-element change tracking
- The   reference variable's valid property   on input controls indicates whether a control is valid or should show error messages
- Controlling the   Submit button's enabled state   by binding to   NgForm validity
-   Custom CSS classes   that provide visual feedback to users about controls that are not valid